#!/usr/bin/python3

import argparse
import configparser
import datetime
import email.mime.text
import json
import os
import random
import re
import requests
import subprocess
import sys
import time
import traceback
import urllib.parse

# Parse options
arg_parser = argparse.ArgumentParser(
                 description='Automatically add online coupons to your Safeway card')
arg_parser.add_argument('-c', '--accounts-config', dest='accounts_config',
                        required=True,
                        help='Path to configuration file containing Safeway accounts')
arg_parser.add_argument('-d', '--debug', dest='debug', action='store_true',
                        help='Print debugging information on stdout')
options = arg_parser.parse_args()

email_sender = ''
auth = []

if not os.path.isfile(options.accounts_config):
    raise Exception('Accounts configuration file %s does not exist.' %
                    options.accounts_config)

config = configparser.SafeConfigParser()
config.read(options.accounts_config)

for section in config.sections():
    if section == '_global':
        if config.has_option(section, 'email_sender'):
            email_sender = config.get(section, 'email_sender')
    else:
        account = {'username': section,
                   'password': config.get(section, 'password')}
        if config.has_option(section, 'notify'):
            account.update({'notify': config.get(section, 'notify')})
        auth.append(account)

if not email_sender:
    raise Exception('No email_sender defined.')
if len(auth) == 0:
    raise Exception('No valid accounts defined.')

sleep_multiplier = 1.0

referer_data = {
    'CC': 'http://www.safeway.com/ShopStores/Justforu-CouponCenter.page?',
    'PD': 'http://www.safeway.com/ShopStores/Justforu-PersonalizedDeals.page?'
}

js_req_headers = {'Content-Type': 'application/json',
                  'DNT': '1',
                  'Host': 'www.safeway.com',
                  'Origin': 'http://www.safeway.com',
                  'SWY_API_KEY': 'emjou',
                  'SWY_BANNER': 'safeway',
                  'SWY_VERSION': '1.0',
                  'User-Agent': ('Mozilla/5.0 (X11; Linux i686) '
                                 'AppleWebKit/537.17 (KHTML, like Gecko) '
                                 'Chrome/24.0.1312.56 Safari/537.17'),
                  'X-Requested-With': 'XMLHttpRequest',
                  'X-SWY_API_KEY': 'emjou',
                  'X-SWY_BANNER': 'safeway',
                  'X-SWY_VERSION': '1.0'}
class safeway():
    def __init__(self, auth):
        self.auth = auth
        self.mail_message = []
        self.mail_subject = 'Safeway coupons'

        try:
            self._init_session()
            self._login()
            self._clip_coupons()
        except Exception as e:
            self.mail_subject += ' (error)'
            self._mail_append('Exception: %s' % str(e))
            for line in traceback.format_exc().split(os.linesep):
                self._mail_append(line)

        if len(self.mail_message) > 0:
            self._send_mail()

    def _mail_append(self, line):
        self.mail_message.append(line)

    def _send_mail(self):
        email_to = self.auth.get('notify') or self.auth.get('username')
        email_from = email_sender

        if self.mail_message[0].startswith('Coupon: '):
            self.mail_message.insert(0, 'Clipped coupons for items you buy:')

        self.mail_message.insert(0, 'Safeway account: %s' % self.auth.get('username'))
        mail_message_str = os.linesep.join(self.mail_message)

        self._debug('Sending email to %s' % email_to)
        self._debug('>>>>>>')
        self._debug(mail_message_str)
        self._debug('<<<<<<')

        email_data = email.mime.text.MIMEText(mail_message_str)
        email_data['To'] = email_to
        email_data['From'] = email_from
        if self.mail_subject:
            email_data['Subject'] = self.mail_subject

        p = subprocess.Popen(['/usr/sbin/sendmail', '-f', email_from, '-t'],
                             stdin=subprocess.PIPE)
        p.communicate(bytes(email_data.as_string(), 'UTF-8'))

    def _debug(self, message):
        if options.debug:
            print(message)

    def _init_session(self):
        self.r_s = requests.Session()
        self.r_a = requests.adapters.HTTPAdapter(pool_maxsize=1)
        self.r_s.mount('http://', self.r_a)
        self.r_s.headers.update({
            'DNT': '1',
            'User-Agent': ('Mozilla/5.0 (X11; Linux i686) '
                           'AppleWebKit/537.17 (KHTML, like Gecko) '
                           'Chrome/24.0.1312.56 Safari/537.17')
            })

    def _login(self):
        rsp = self._run_request('http://www.safeway.com')
        rsp.stream = False

        rsp = self._run_request('https://auth.safeway.com/opensso/UI/Login')
        rsp.stream = False

        self._debug('Logging in as %s' % self.auth.get('username'))
        login_data = urllib.parse.urlencode(
            {'encoded': False,
             'arg': 'newsession',
             'goto': 'http://www.safeway.com/ShopStores/Home',
             'SunQueryParamString': '',
             'IDToken1': self.auth.get('username'),
             'IDToken2': self.auth.get('password')})
        headers = {'Content-type': 'application/x-www-form-urlencoded',
                   'Accept': 'text/plain'}
        rsp = self._run_request('https://auth.safeway.com/opensso/UI/Login',
                                login_data, headers)
        if 'error' in rsp.content.decode('UTF-8'):
            raise Exception('Authentication failure')

    def _run_request(self, url, data=None, headers=None):
        if data:
            return self.r_s.post(url, headers=headers, data=data)
        return self.r_s.get(url, headers=headers)

    def _get_coupon_details(self, oid, ts, section):
        headers = js_req_headers
        headers.update({'Referer': referer_data[section]})

        url = ('http://www.safeway.com/J4UProgram1/services/offer/%s/definition/cacheTs/%s' %
               (oid, ts))
        rsp = self._run_request(url, headers=headers)
        coupon_data = json.loads(rsp.content.decode('UTF-8'))
        coupon_detail = coupon_data.get('offerDetail', {})
        title = ('%s %s %s' % (coupon_detail.get('titleDsc1', ''),
                            coupon_detail.get('titleDsc2', ''),
                            coupon_detail.get('prodDsc1', ''))).strip()
        if section == 'PD':
            detail = ('%s %s' % (coupon_detail.get('priceTitle1', ''),
                                 coupon_detail.get('priceValue1', ''))).strip()
        else:
            detail = ('%s' % coupon_detail.get('savingsValue', '')).strip()
        try:
            expire_ts_unix = int(re.match('\\\/Date\(([0-9]{10})[0-9]{3}\)\\\/',
                                          coupon_data['offerEndDt']).group(1))
            expires = (datetime.datetime.fromtimestamp(expire_ts_unix)
                               .strftime('%Y.%m.%d'))
        except Exception as e:
            self._mail_append('Exception getting coupon details: %s' % str(e))
            for line in traceback.format_exc().split(os.linesep):
                self._mail_append(line)
            expires = 'Unknown'
        self._mail_append('Coupon: %s (%s, expires: %s)' %
                          (title, detail, expires))
        rsp.stream = False
        # Don't blast the server with requests
        time.sleep(random.uniform(0.05, 0.15) * sleep_multiplier)

    def _clip_coupon(self, oid, section, post_json):
        headers = js_req_headers
        headers.update({'Referer': referer_data[section]})
        rsp = self._run_request('http://www.safeway.com/Clipping1/services/clip/offers',
                          post_json, headers)
        rsp.stream = False
        return (rsp.status_code == 204)

    def _clip_coupons(self):
        clip_counts = {}
        clip_count = 0
        error_count = 0

        try:
            for section in ['PD', 'CC']:
                self._debug('Retrieving %s coupons' % section)
                rsp = self._run_request('http://www.safeway.com/J4UProgram1/services/program/%s/offer/allocations' % (section))
                data = rsp.content.decode('UTF-8')
                clip_counts.setdefault(section, 0)
                offers = json.loads(data)
                if not 'offers' in offers:
                    raise Exception('Offers not found')
                offers = offers['offers']
                for i in range(len(offers)):
                    if offers[i]['clipStatus'] == 'C':
                        continue
                    post_json = ('{"clips":[{"offerId":%s,"offerPgm":"%s"}]}' %
                                 (offers[i]['offerId'], offers[i]['offerPgm']))
                    oid = offers[i]['offerId']
                    clip_success = self._clip_coupon(oid, section, post_json)
                    if clip_success:
                        self._debug('Clipped coupon %s %s' % (section, oid))
                        clip_counts[section] += 1
                    else:
                        print('Error clipping coupon %s %s' % (section, oid))
                        error_count += 1
                        if error_count >= 5:
                            raise Exception('Reached error count threshold (%d)' %
                                            error_count)
                    if (offers[i]['purchaseInd'] == 'B'):
                        self._get_coupon_details(offers[i]['offerId'], offers[i]['offerTs'], section)
                    # Simulate longer pauses for "scrolling" and "paging"
                    if i > 0 and i % 12 == 0:
                        if i % 48 == 0:
                            w = random.uniform(15.0, 25.0)
                        else:
                            w = random.uniform(4.0, 8.0)
                        w *= sleep_multiplier
                        self._debug('Waiting %s seconds' % str(w))
                        time.sleep(w)
                    else:
                        time.sleep(random.uniform(0.3, 0.8) * sleep_multiplier)
                        pass
                    clip_count += 1
        except Exception as e:
            self._mail_append('Exception clipping coupons: %s' % str(e))
            for line in traceback.format_exc().split(os.linesep):
                self._mail_append(line)

        if clip_count > 0 or error_count > 0:
            self.mail_subject += ': %d clipped' % clip_count
            self._mail_append('Clipped %d coupons total:' % clip_count)
            for section_tuple in clip_counts.items():
                self._mail_append('    %s => %d coupons' % section_tuple)
            if error_count > 0:
                self.mail_subject += ', %d errors' % error_count
                self._mail_append('Coupon clip errors: %d' % error_count)

for index, user_data in enumerate(auth):
    safeway(user_data)
    if index < len(auth) - 1:
        time.sleep(random.uniform(5.0, 10.0) * sleep_multiplier)
